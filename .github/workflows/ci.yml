name: ci
on:
  push:
  pull_request:

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps (CPU wheels)
        run: |
          python -m pip install --upgrade pip
          # Install CPU Torch first to avoid CUDA pulls
          pip install --index-url https://download.pytorch.org/whl/cpu torch torchvision
          # Then the rest
          pip install -r training/requirements.txt

      - name: TorchScript + PN roundtrip self-test
        run: |
          mkdir -p model_out
          python - <<'PY'
          import torch, os
          from PIL import Image, ImageDraw
          import torchvision.transforms.functional as TF
          from training.model import AegisMark

          os.makedirs("model_out", exist_ok=True)

          m = AegisMark(bit_len=32, image_size=256)
          torch.jit.script(m.enc).save("model_out/encoder.pt")
          torch.jit.script(m.dec).save("model_out/decoder.pt")

          img = Image.new("RGB", (256,256), (240,240,240))
          d = ImageDraw.Draw(img); d.rectangle([64,64,192,192], outline=(10,10,10), width=6)
          img.save("ci_input.png")
          PY

      - name: Embed + detect (expect high bit_acc)
        run: |
          python scripts/embed_savebits.py --encoder model_out/encoder.pt --in_img ci_input.png --out_img ci_wm.png --bits_out ci_bits.npy
          python scripts/detect_pn_shift_scale.py --encoder model_out/encoder.pt --img ci_wm.png --bits ci_bits.npy > ci_result.json
          python - <<'PY'
          import json, sys
          j=json.load(open("ci_result.json"))
          acc=j.get("bit_acc",0.0)
          print("bit_acc:", acc)
          sys.exit(0 if acc>=0.9 else 1)
          PY
